<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<title>Mashup Test</title>
</head>
<body>
	<div id='test1'>ready!!</div>
	<div id='test2'>ready!!</div>
</body>
	<script language="javascript">
	if(typeof(JSON)!='object'){
		var JSON = JSON || {};

		(function () {

			function f(n) {
				// Format integers to have at least two digits.
				return n < 10 ? '0' + n : n;
			}

			if (typeof Date.prototype.toJSON !== 'function') {

				Date.prototype.toJSON = function (key) {

					return this.getUTCFullYear()   + '-' +
						 f(this.getUTCMonth() + 1) + '-' +
						 f(this.getUTCDate())      + 'T' +
						 f(this.getUTCHours())     + ':' +
						 f(this.getUTCMinutes())   + ':' +
						 f(this.getUTCSeconds())   + 'Z';
				};

				String.prototype.toJSON =
				Number.prototype.toJSON =
				Boolean.prototype.toJSON = function (key) {
					return this.valueOf();
				};
			}

			var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
				escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
				gap,
				indent,
				meta = {    // table of character substitutions
					'\b': '\\b',
					'\t': '\\t',
					'\n': '\\n',
					'\f': '\\f',
					'\r': '\\r',
					'"' : '\\"',
					'\\': '\\\\'
				},
				rep;


			function quote(string) {

		// If the string contains no control characters, no quote characters, and no
		// backslash characters, then we can safely slap some quotes around it.
		// Otherwise we must also replace the offending characters with safe escape
		// sequences.

				escapable.lastIndex = 0;
				return escapable.test(string) ?
					'"' + string.replace(escapable, function (a) {
						var c = meta[a];
						return typeof c === 'string' ? c :
							'\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
					}) + '"' :
					'"' + string + '"';
			}


			function str(key, holder) {

		// Produce a string from holder[key].

				var i,          // The loop counter.
					k,          // The member key.
					v,          // The member value.
					length,
					mind = gap,
					partial,
					value = holder[key];

		// If the value has a toJSON method, call it to obtain a replacement value.

				if (value && typeof value === 'object' &&
						typeof value.toJSON === 'function') {
					value = value.toJSON(key);
				}

		// If we were called with a replacer function, then call the replacer to
		// obtain a replacement value.

				if (typeof rep === 'function') {
					value = rep.call(holder, key, value);
				}

		// What happens next depends on the value's type.

				switch (typeof value) {
				case 'string':
					return quote(value);

				case 'number':

		// JSON numbers must be finite. Encode non-finite numbers as null.

					return isFinite(value) ? String(value) : 'null';

				case 'boolean':
				case 'null':

		// If the value is a boolean or null, convert it to a string. Note:
		// typeof null does not produce 'null'. The case is included here in
		// the remote chance that this gets fixed someday.

					return String(value);

		// If the type is 'object', we might be dealing with an object or an array or
		// null.

				case 'object':

		// Due to a specification blunder in ECMAScript, typeof null is 'object',
		// so watch out for that case.

					if (!value) {
						return 'null';
					}

		// Make an array to hold the partial results of stringifying this object value.

					gap += indent;
					partial = [];

		// Is the value an array?

					if (Object.prototype.toString.apply(value) === '[object Array]') {

		// The value is an array. Stringify every element. Use null as a placeholder
		// for non-JSON values.

						length = value.length;
						for (i = 0; i < length; i += 1) {
							partial[i] = str(i, value) || 'null';
						}

		// Join all of the elements together, separated with commas, and wrap them in
		// brackets.

						v = partial.length === 0 ? '[]' :
							gap ? '[\n' + gap +
									partial.join(',\n' + gap) + '\n' +
										mind + ']' :
								  '[' + partial.join(',') + ']';
						gap = mind;
						return v;
					}

		// If the replacer is an array, use it to select the members to be stringified.

					if (rep && typeof rep === 'object') {
						length = rep.length;
						for (i = 0; i < length; i += 1) {
							k = rep[i];
							if (typeof k === 'string') {
								v = str(k, value);
								if (v) {
									partial.push(quote(k) + (gap ? ': ' : ':') + v);
								}
							}
						}
					} else {

		// Otherwise, iterate through all of the keys in the object.

						for (k in value) {
							if (Object.hasOwnProperty.call(value, k)) {
								v = str(k, value);
								if (v) {
									partial.push(quote(k) + (gap ? ': ' : ':') + v);
								}
							}
						}
					}

		// Join all of the member texts together, separated with commas,
		// and wrap them in braces.

					v = partial.length === 0 ? '{}' :
						gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' +
								mind + '}' : '{' + partial.join(',') + '}';
					gap = mind;
					return v;
				}
			}

		// If the JSON object does not yet have a stringify method, give it one.

			if (typeof JSON.stringify !== 'function') {
				JSON.stringify = function (value, replacer, space) {

		// The stringify method takes a value and an optional replacer, and an optional
		// space parameter, and returns a JSON text. The replacer can be a function
		// that can replace values, or an array of strings that will select the keys.
		// A default replacer method can be provided. Use of the space parameter can
		// produce text that is more easily readable.

					var i;
					gap = '';
					indent = '';

		// If the space parameter is a number, make an indent string containing that
		// many spaces.

					if (typeof space === 'number') {
						for (i = 0; i < space; i += 1) {
							indent += ' ';
						}

		// If the space parameter is a string, it will be used as the indent string.

					} else if (typeof space === 'string') {
						indent = space;
					}

		// If there is a replacer, it must be a function or an array.
		// Otherwise, throw an error.

					rep = replacer;
					if (replacer && typeof replacer !== 'function' &&
							(typeof replacer !== 'object' ||
							 typeof replacer.length !== 'number')) {
						throw new Error('JSON.stringify');
					}

		// Make a fake root object containing our value under the key of ''.
		// Return the result of stringifying the value.

					return str('', {'': value});
				};
			}


		// If the JSON object does not yet have a parse method, give it one.

			if (typeof JSON.parse !== 'function') {
				JSON.parse = function (text, reviver) {

		// The parse method takes a text and an optional reviver function, and returns
		// a JavaScript value if the text is a valid JSON text.

					var j;

					function walk(holder, key) {

		// The walk method is used to recursively walk the resulting structure so
		// that modifications can be made.

						var k, v, value = holder[key];
						if (value && typeof value === 'object') {
							for (k in value) {
								if (Object.hasOwnProperty.call(value, k)) {
									v = walk(value, k);
									if (v !== undefined) {
										value[k] = v;
									} else {
										delete value[k];
									}
								}
							}
						}
						return reviver.call(holder, key, value);
					}


		// Parsing happens in four stages. In the first stage, we replace certain
		// Unicode characters with escape sequences. JavaScript handles many characters
		// incorrectly, either silently deleting them, or treating them as line endings.

					cx.lastIndex = 0;
					if (cx.test(text)) {
						text = text.replace(cx, function (a) {
							return '\\u' +
								('0000' + a.charCodeAt(0).toString(16)).slice(-4);
						});
					}

		// In the second stage, we run the text against regular expressions that look
		// for non-JSON patterns. We are especially concerned with '()' and 'new'
		// because they can cause invocation, and '=' because it can cause mutation.
		// But just to be safe, we want to reject all unexpected forms.

		// We split the second stage into 4 regexp operations in order to work around
		// crippling inefficiencies in IE's and Safari's regexp engines. First we
		// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
		// replace all simple value tokens with ']' characters. Third, we delete all
		// open brackets that follow a colon or comma or that begin the text. Finally,
		// we look to see that the remaining characters are only whitespace or ']' or
		// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

					if (/^[\],:{}\s]*$/.
		test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').
		replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
		replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

		// In the third stage we use the eval function to compile the text into a
		// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
		// in JavaScript: it can begin a block or an object literal. We wrap the text
		// in parens to eliminate the ambiguity.

						j = eval('(' + text + ')');

		// In the optional fourth stage, we recursively walk the new structure, passing
		// each name/value pair to a reviver function for possible transformation.

						return typeof reviver === 'function' ?
							walk({'': j}, '') : j;
					}

		// If the text is not JSON parseable, then a SyntaxError is thrown.

					throw new SyntaxError('JSON.parse');
				};
			}
		}());
	}
	
	var GPSLocator = new XMLHttpRequest();
	var GPSLocatorJSON = null;
	GPSLocator.open('GET', 'json', false);  
	GPSLocator.send(null);
	GPSLocatorJSON = JSON.parse(GPSLocator.responseText);
	
	var LocalWeather = new XMLHttpRequest();
	var LocalWeatherJSON;	
	var elem1 = document.getElementById('test1');
	var url = 'LocalWeather?username=prach&lat='+GPSLocatorJSON.latitude+'&lng='+GPSLocatorJSON.longitude;
	LocalWeather.open('GET', url, true);  
	LocalWeather.onreadystatechange = function (aEvt) {  
	  if (LocalWeather.readyState == 4) {  
	     if(LocalWeather.status == 200){
	      	elem1 = document.getElementById('test1');
			//alert(elem.value);
			var LocalWeatherJSON = JSON.parse(LocalWeather.responseText);
			var result = "<table><tr><td>Country Code</td><td><span style='color:green'>"+
				LocalWeatherJSON.weatherObservation.countryCode+
				"</span></td></tr><tr><td>temperaure</td><td><span style='color:red'>"+
				LocalWeatherJSON.weatherObservation.temperature+
				" degrees</span></td></tr><tr><td>clouds</td><td><span style='color:blue'>"+
				LocalWeatherJSON.weatherObservation.clouds+
				"</span></td></tr><tr><td>Station Name</td><td><span style='color:purple'>"+
				LocalWeatherJSON.weatherObservation.stationName+
				"</span></td></tr></table><br>"
			elem1.innerHTML = result;
		}else  
	      alert("Error loading page\n");  
	  }else elem1.innerHTML="connecting...";  
	};  
	LocalWeather.send(null);
	
	var Wikinear = new XMLHttpRequest();
	var WikinearJSON;	
	var elem2 = document.getElementById('test2');
	var url = 'Wikinear?username=prach&lat='+GPSLocatorJSON.latitude+'&lng='+GPSLocatorJSON.longitude;
	Wikinear.open('GET', url, true);  
	Wikinear.onreadystatechange = function (aEvt) {  
	  if (Wikinear.readyState == 4) {  
	     if(Wikinear.status == 200){
	      	elem2 = document.getElementById('test2');
			var WikinearJSON = JSON.parse(Wikinear.responseText);
			var result = "<table><tr><td>title</td><td><span style='color:red'>"+
				WikinearJSON.geonames[0].title+
				"</span></td></tr><tr><td>summary</td><td><span style='color:black'>"+
				WikinearJSON.geonames[0].summary+
				"</span></td></tr><tr><td>distance</td><td><span style='color:green'>"+
				WikinearJSON.geonames[0].distance+
				"</span></td></tr><tr><td>url</td><td><span style='color:blue'><a href='http://"+
				WikinearJSON.geonames[0].wikipediaUrl+
				"'>"+
				WikinearJSON.geonames[0].wikipediaUrl+
				"</a></span></td></tr><tr><td>coor</td><td><span style='color:purple'>"+
				WikinearJSON.geonames[0].lat+
				" "+
				WikinearJSON.geonames[0].lng+
				"</span></td></tr><tr><td>&nbsp;</td></tr><tr><td>title</td><td><span style='color:red'>"+
				WikinearJSON.geonames[1].title+
				"</span></td></tr><tr><td>summary</td><td><span style='color:black'>"+
				WikinearJSON.geonames[1].summary+
				"</span></td></tr><tr><td>distance</td><td><span style='color:green'>"+
				WikinearJSON.geonames[1].distance+
				"</span></td></tr><tr><td>url</td><td><span style='color:blue'><a href='http://"+
				WikinearJSON.geonames[1].wikipediaUrl+
				"'>"+
				WikinearJSON.geonames[1].wikipediaUrl+
				"</a></span></td></tr><tr><td>coor</td><td><span style='color:purple'>"+
				WikinearJSON.geonames[1].lat+
				" "+
				WikinearJSON.geonames[1].lng+
				"</span></td></tr><tr><td>&nbsp;</td></tr><tr><td>title</td><td><span style='color:red'>"+
				WikinearJSON.geonames[2].title+
				"</span></td></tr><tr><td>summary</td><td><span style='color:black'>"+
				WikinearJSON.geonames[2].summary+
				"</span></td></tr><tr><td>distance</td><td><span style='color:green'>"+
				WikinearJSON.geonames[2].distance+
				"</span></td></tr><tr><td>url</td><td><span style='color:blue'><a href='http://"+
				WikinearJSON.geonames[2].wikipediaUrl+
				"'>"+
				WikinearJSON.geonames[2].wikipediaUrl+
				"</a></span></td></tr><tr><td>coor</td><td><span style='color:purple'>"+
				WikinearJSON.geonames[2].lat+
				" "+
				WikinearJSON.geonames[2].lng+
				"</span></td></tr></table>"
			elem2.innerHTML = result;
		}else  
	      alert("Error loading page\n");  
	  }else elem2.innerHTML="connecting...";  
	};  
	Wikinear.send(null);
	
	</script>
</html>